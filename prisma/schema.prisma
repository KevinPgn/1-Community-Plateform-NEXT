datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  pseudo        String?         @unique
  bio           String?
  location      String?
  website       String?
  banner        String?

  birthdate     DateTime?
  isAdmin       Boolean         @default(false)
  isVerified    Boolean         @default(false)

  posts Post[]
  comments Comment[]
  likes Like[]
  reposts Repost[]
  badges Badge[]
  notifications Notification[]

  followers Follow[] @relation("Followers")
  following Follow[] @relation("Following")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Post {
  id String @id @default(cuid())
  content String
  image String?
  views Int @default(0)

  authorId String
  author User @relation(fields: [authorId], references: [id])

  isPublic Boolean @default(false) // if private, only followers can see it
 
  comments Comment[]
  likes Like[]
  reposts Repost[]
  tags Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id String @id @default(cuid())
  name String @unique
  posts Post[]
}

model Comment {
  id String @id @default(cuid())
  content String
  image String?

  authorId String
  author User @relation(fields: [authorId], references: [id])
  
  parentId String?
  parent Comment? @relation("Replies", fields: [parentId], references: [id])
  replies Comment[] @relation("Replies")

  postId String
  post Post @relation(fields: [postId], references: [id])
}

model Like {
  id String @id @default(cuid())
  authorId String
  author User @relation(fields: [authorId], references: [id])

  postId String
  post Post @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([authorId, postId])
}

model Repost {
  id String @id @default(cuid())
  authorId String
  author User @relation(fields: [authorId], references: [id])

  postId String
  post Post @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([authorId, postId])
}

model Follow {
  id String @id @default(cuid())
  followerId String
  follower User @relation("Followers", fields: [followerId], references: [id])

  followingId String
  following User @relation("Following", fields: [followingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
}

// Badge system
model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  
  icon        String
  users       User[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Notification system
model Notification {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])

  type String
  content String
  isRead Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}