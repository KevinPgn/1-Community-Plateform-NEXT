datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  pseudo        String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  city        String?
  working       String?
  school        String?
  link          String?
  birthdate     DateTime?
  bio           String?
  banner        String?
  isAdmin       Boolean         @default(false)

  posts         Post[]
  comments      Comment[]
  likes         Like[]
  bookmarks     Bookmark[]
  reposts       Repost[]

  friendRequests FriendRequest[] @relation("sender")
  friendRequestsReceived FriendRequest[] @relation("receiver")
  friends FriendShip[] @relation("user")
  friendsOf FriendShip[] @relation("friend")

  followers     Follow[] @relation("follower")
  following     Follow[] @relation("following")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Post {
  id String @id @default(cuid())
  title String
  content String
  
  authorId String
  author User @relation(fields: [authorId], references: [id])
  
  comments Comment[]
  likes Like[]
  bookmarks Bookmark[]
  reposts Repost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id String @id @default(cuid())
  content String
  authorId String
  author User @relation(fields: [authorId], references: [id])
  postId String
  post Post @relation(fields: [postId], references: [id])

  parentId String?
  parent Comment? @relation("commentsReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("commentsReplies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id String @id @default(cuid())
  authorId String
  author User @relation(fields: [authorId], references: [id])
  postId String
  post Post @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([authorId, postId])
}

model Bookmark {
  id String @id @default(cuid())
  authorId String
  author User @relation(fields: [authorId], references: [id])
  postId String
  post Post @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([authorId, postId])
}

model Repost {
  id String @id @default(cuid())
  authorId String
  author User @relation(fields: [authorId], references: [id])
  postId String
  post Post @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([authorId, postId])
}

model Follow {
  id String @id @default(cuid())
  followerId String
  follower User @relation(name: "follower", fields: [followerId], references: [id])
  followingId String
  following User @relation(name: "following", fields: [followingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
}

// Demande d'ami
model FriendRequest {
  id String @id @default(cuid())
  senderId String
  sender User @relation(name: "sender", fields: [senderId], references: [id])
  receiverId String
  receiver User @relation(name: "receiver", fields: [receiverId], references: [id])
  status String @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([senderId, receiverId])
}

model FriendShip {
  id String @id @default(cuid())
  userId String
  user User @relation(name: "user", fields: [userId], references: [id])
  friendId String
  friend User @relation(name: "friend", fields: [friendId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, friendId])
}