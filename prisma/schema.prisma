datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  communities Community[] @relation("CommunityMembers")
  createdCommunities Community[] @relation("CommunityCreator")
  posts Post[]
  comments Comment[]
  likes Like[]
  followers     Follow[] @relation("Follower")
  following     Follow[] @relation("Following")
  notifications Notification[]
  bookmarks Bookmark[]
  postsWithoutCommunity PostsWithoutCommunity[]
  commentsPostWithoutCommunity CommentPostWithoutCommunity[]
  likesLikePostWithoutCommunity LikePostWithoutCommunity[]
  bookmarksBookmarkPostWithoutCommunity BookmarkPostWithoutCommunity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model PostsWithoutCommunity {
  id String @id @default(cuid())
  title String
  content String?
  image String?

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  commentsPostWithoutCommunity CommentPostWithoutCommunity[]
  likesLikePostWithoutCommunity LikePostWithoutCommunity[]
  bookmarksBookmarkPostWithoutCommunity BookmarkPostWithoutCommunity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommentPostWithoutCommunity {
  id String @id @default(cuid())
  content String
  postWithoutCommunityId String
  postWithoutCommunity PostsWithoutCommunity @relation(fields: [postWithoutCommunityId], references: [id], onDelete: Cascade)

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LikePostWithoutCommunity {
  id String @id @default(cuid())
  postWithoutCommunityId String
  postWithoutCommunity PostsWithoutCommunity @relation(fields: [postWithoutCommunityId], references: [id], onDelete: Cascade)

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([authorId, postWithoutCommunityId])
}

model BookmarkPostWithoutCommunity {
  id String @id @default(cuid())
  postWithoutCommunityId String
  postWithoutCommunity PostsWithoutCommunity @relation(fields: [postWithoutCommunityId], references: [id], onDelete: Cascade)

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([authorId, postWithoutCommunityId])
}

model Community {
  id          String @id @default(cuid())
  name        String
  description String
  image       String?
  banner      String?
  
  creatorId   String
  creator     User @relation("CommunityCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  
  members     User[] @relation("CommunityMembers")
  posts       Post[]
  tags        Tag[] @relation("CommunityTags")
  rules       Rule[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tag {
  id          String @id @default(cuid())
  name        String @unique
  communities Community[] @relation("CommunityTags")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Rule {
  id          String @id @default(cuid())
  title       String
  description String
  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([communityId, title])
}

model Post {
  id String @id @default(cuid())
  title String
  content String?
  image String?
  communityId String
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]
  likes Like[]
  bookmarks Bookmark[]

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Comment {
  id String @id @default(cuid())
  content String
  postId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id String @id @default(cuid())
  postId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([authorId, postId])
}

model Bookmark {
  id String @id @default(cuid())
  postId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([authorId, postId])
}

model Follow {
  id String @id @default(cuid())
  followerId String
  follower User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // e.g., "like", "comment", "follow"
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}